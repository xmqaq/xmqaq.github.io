<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Docker常用命令详解</title>
      <link href="/2022/09/08/Docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/"/>
      <url>/2022/09/08/Docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="一、镜像相关命令"><a href="#一、镜像相关命令" class="headerlink" title="一、镜像相关命令"></a>一、镜像相关命令</h2><h3 id="1-获取镜像"><a href="#1-获取镜像" class="headerlink" title="1. 获取镜像"></a>1. 获取镜像</h3><p>我们要获取镜像，可以到<a href="https://hub.docker.com/search?q=&type=image">Docker Hub</a>进行拉取，上面有大量的Docker官方镜像可以用，以及高质量个人的镜像，现在我们来讲一下，官方镜像和个人镜像该怎么进行获取。</p><p>从 Docker 镜像仓库获取镜像的命令是 <code>docker pull</code>。其命令格式为：</p><pre class=" language-bash"><code class="language-bash">$ docker pull <span class="token punctuation">[</span>选项<span class="token punctuation">]</span> <span class="token punctuation">[</span>Docker Registry 地址<span class="token punctuation">[</span>:端口号<span class="token punctuation">]</span>/<span class="token punctuation">]</span>仓库名<span class="token punctuation">[</span>:标签<span class="token punctuation">]</span></code></pre><p>具体的选项可以通过 <code>docker pull --help</code> 命令看到，这里我们说一下镜像名称的格式</p><ul><li>Docker 镜像仓库地址：地址的格式一般是 <code>&lt;域名/IP&gt;[:端口号]</code>。默认地址是 Docker Hub(<code>docker.io</code>)。</li><li>仓库名：如之前所说，这里的仓库名是两段式名称，即 <code>&lt;用户名&gt;/&lt;软件名&gt;</code>。对于 Docker Hub，如果不给出用户名，则默认为 <code>library</code>，也就是官方镜像。</li></ul><h5 id="获取官方docker镜像"><a href="#获取官方docker镜像" class="headerlink" title="获取官方docker镜像"></a>获取官方docker镜像</h5><p>在服务器获取ubuntu官方镜像，执行命令：</p><pre class=" language-bash"><code class="language-bash">docker pull ubuntu:18.04</code></pre><img src="/2022/09/08/Docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/image-20220908160408022.png" class=""><p>上面的命令中没有给出 Docker 镜像仓库地址，因此将会从 Docker Hub （<code>docker.io</code>）获取镜像。而镜像名称是 <code>ubuntu:18.04</code>，因此将会获取官方镜像 <code>library/ubuntu</code> 仓库中标签为 <code>18.04</code> 的镜像。<code>docker pull</code> 命令的输出结果最后一行给出了镜像的完整名称，即： <code>docker.io/library/ubuntu:18.04</code>。</p><h5 id="获取个人用户docker镜像"><a href="#获取个人用户docker镜像" class="headerlink" title="获取个人用户docker镜像"></a>获取个人用户docker镜像</h5><pre class=" language-bash"><code class="language-bash">docker pull xmqaq/web_upload1</code></pre><img src="/2022/09/08/Docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/image-20220908160432406.png" class=""><p>上面获取的是xmqaq用户web_upload1镜像仓库中标签为latest的镜像（不指定具体标签，标签默认为latest），拉取个人用户镜像的结构就是<code>用户名/镜像仓库名：tagname</code></p><h3 id="2-列出镜像"><a href="#2-列出镜像" class="headerlink" title="2. 列出镜像"></a>2. 列出镜像</h3><p>想要列出已经下载下来的镜像，可以使用 <code>docker images</code> 命令。</p><img src="/2022/09/08/Docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/image-20220908160448315.png" class=""><p>列表包含了 <code>仓库名</code>、<code>标签</code>、<code>镜像 ID</code>、<code>创建时间</code> 以及 <code>所占用的空间</code>。</p><h3 id="3-删除本地镜像"><a href="#3-删除本地镜像" class="headerlink" title="3. 删除本地镜像"></a>3. 删除本地镜像</h3><p>如果要删除本地的镜像，可以使用 <code>docker rmi 镜像名称</code> 命令，其格式为：</p><pre class=" language-bash"><code class="language-bash">docker rmi xmqaq/web_upload1 </code></pre><img src="/2022/09/08/Docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/image-20220908160501859.png" class=""><h3 id="4-使用Dockerfile文件，创建镜像"><a href="#4-使用Dockerfile文件，创建镜像" class="headerlink" title="4. 使用Dockerfile文件，创建镜像"></a>4. 使用Dockerfile文件，创建镜像</h3><p>在dockerfile同一目录下执行如下命令：</p><pre><code> docker build -t xmqaq/xmctf_exec_2022 .</code></pre><img src="/2022/09/08/Docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/image-20220908160522791.png" class=""><p>通过上述命令可以利用Dockerfile文件构造一个本地的镜像,但要注意上图中的xmqaq为Docker Hub的用户名，构建镜像时，前面的用户名一定要对应我们Docker Hub的用户名。</p><h3 id="5-推送本地镜像到Docker-Hub仓库"><a href="#5-推送本地镜像到Docker-Hub仓库" class="headerlink" title="5. 推送本地镜像到Docker Hub仓库"></a>5. 推送本地镜像到Docker Hub仓库</h3><p>上面我们通过Dockerfile创建了一个本地镜像，我们可以把它推送到我们Docker hub的公共仓库上面，这样不仅我们可以访问自己创建的镜像，别人也可以在仓库拉取我们的镜像进行使用。</p><p>命令格式如下：</p><pre class=" language-bash"><code class="language-bash">docker push 用户名/镜像名称：tagname（tagname不指定，默认会指定为latest）</code></pre><img src="/2022/09/08/Docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/image-20220908160541000.png" class=""><p>从上图可以发现我们的镜像已经上传到我们的docker hub仓库中了。</p><img src="/2022/09/08/Docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/image-20220908160554064.png" class=""><h3 id="6-更改镜像名-版本号"><a href="#6-更改镜像名-版本号" class="headerlink" title="6. 更改镜像名:版本号"></a>6. 更改镜像名:版本号</h3><p>修改本地镜像名称版本号，使用的命令如下：</p><pre class=" language-bash"><code class="language-bash">docker tag local-image:tagname username/new-repo:tagname</code></pre><ul><li>local-image是本地镜像的名称，也就是要被修改的镜像名称</li><li>username为你在docker hub的用户名</li><li>new-repo为新的镜像名称，tagname为镜像标签，可以不指定默认为latest</li></ul><p>下面举个例子：</p><pre class=" language-bash"><code class="language-bash">docker tag xmqaq/web_upload2:latest xmqaq/web_upload:1.0</code></pre><img src="/2022/09/08/Docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/image-20220908160610448.png" class=""><p>上图，我将本地的镜像名称从web_upload2改成了web_upload,并将标签从latest改成了1.0，我们可以使用docker images查看我们改名后的镜像。</p><img src="/2022/09/08/Docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/image-20220908160623400.png" class=""><p>可以看到镜像名称和版本号已经更改成功。</p><h3 id="7-更新镜像仓库"><a href="#7-更新镜像仓库" class="headerlink" title="7. 更新镜像仓库"></a>7. 更新镜像仓库</h3><p>我们有一天需要新功能了，需要在之前镜像的基础上修改镜像，该如何把最新镜像上传到仓库呢，使用如下命令：</p><pre class=" language-bash"><code class="language-bash">docker push xmqaq/ceshi_ssrf_2022:2.0</code></pre><img src="/2022/09/08/Docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/image-20220908160638084.png" class=""><p>上图我们在镜像仓库添加了2.0的版本，如果是更新就是指定标签为latest也就是<code>xmqaq/ceshi_ssrf_2022:latest</code></p><img src="/2022/09/08/Docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/image-20220908160648863.png" class=""><h3 id="8-修改镜像重新打包成新的镜像"><a href="#8-修改镜像重新打包成新的镜像" class="headerlink" title="8. 修改镜像重新打包成新的镜像"></a>8. 修改镜像重新打包成新的镜像</h3><p>这种方式主要用于，比如我们在官方下载了一个操作系统镜像，使用镜像创建了一个容器，我们想要在容器往里面安装一些服务和软件，但是容器一旦死亡所有之前安装的都会消失，为了避免这个问题，我们可以把我们已经构造好的容器打包成一个新的镜像，这样下次只需用这个新的镜像去创建容器，里面的软件和对应的服务依然会保留。</p><p>下面举一个实例介绍下如何修改镜像打包成新的镜像：</p><p>（1）使用原镜像进入容器里面</p><pre class=" language-bash"><code class="language-bash">docker run -it 镜像名称  /bin/bash</code></pre><p>（2）在容器里面安装phpstudy</p><img src="/2022/09/08/Docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/image-20220908160700381.png" class=""><p>（3）exit退出，使用如下命令进行打包</p><pre class=" language-bash"><code class="language-bash">docker commit -m 说明信息 -a 更新用户信息  容器名称  新的镜像名称:2.0（正在运行的容器也是可以打包成镜像的）</code></pre><img src="/2022/09/08/Docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/image-20220908160712139.png" class=""><h2 id="二、容器相关命令"><a href="#二、容器相关命令" class="headerlink" title="二、容器相关命令"></a>二、容器相关命令</h2><h3 id="1-创建容器"><a href="#1-创建容器" class="headerlink" title="1. 创建容器"></a>1. 创建容器</h3><p>创建容器的前提是需要有一个镜像，具体怎么获取镜像我们在前面已经说明了，创建容器的具体命令格式如下：</p><pre class=" language-bash"><code class="language-bash">docker run -it --name 容器名称 -p 外部映射端口:内部容器端口 镜像名称 /bin/bash</code></pre><p>实例：</p><pre class=" language-bash"><code class="language-bash">docker run -it --name xm -p 80:8080 centos:1.0 /bin/bash</code></pre><img src="/2022/09/08/Docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/image-20220908160723007.png" class=""><h3 id="2-查看正在运行的容器"><a href="#2-查看正在运行的容器" class="headerlink" title="2. 查看正在运行的容器"></a>2. 查看正在运行的容器</h3><p>查看运行容器的命令是<code>docker ps</code></p><img src="/2022/09/08/Docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/image-20220908160733363.png" class=""><h3 id="3-查看所有容器"><a href="#3-查看所有容器" class="headerlink" title="3. 查看所有容器"></a>3. 查看所有容器</h3><p>查看当前运行和停止的容器命令是<code>docker ps -a</code></p><img src="/2022/09/08/Docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/image-20220908160749438.png" class=""><h3 id="4-删除容器"><a href="#4-删除容器" class="headerlink" title="4. 删除容器"></a>4. 删除容器</h3><p>想要删除当前运行的容器，需要将容器停止，停止容器的命令为<code>docker stop 容器id/容器名称</code>，然后进行删除，删除容器的命令为<code>docker rm 容器id/容器名称</code></p><p>举个实例：</p><p>先使用<code>docker ps</code>查看当前运行的容器</p><img src="/2022/09/08/Docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/image-20220908160809393.png" class=""><p>从上图可以看到当前运行容器的id，我们使用<code>docker stop</code>停止该容器</p><img src="/2022/09/08/Docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/image-20220908163629148.png" class=""><p>这里容器只需输入前三位即可，不需补全</p><p>然后使用<code>docker rm 84e</code>命令删除容器即可</p><h3 id="5-查看容器ip"><a href="#5-查看容器ip" class="headerlink" title="5. 查看容器ip"></a>5. 查看容器ip</h3><p>查看当前运行容器ip有两种方</p><p>第一种:</p><pre class=" language-bash"><code class="language-bash">docker inspect --format<span class="token operator">=</span><span class="token string">'&amp;#123;&amp;#123;.NetworkSettings.IPAddress&amp;#125;&amp;#125;'</span> 容器名称</code></pre><img src="/2022/09/08/Docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/image-20220908163651820.png" class=""><p>上图查看的是容器名为xxe的ip地址</p><p>第二种：</p><pre class=" language-bash"><code class="language-bash">docker inspect 容器名称 <span class="token operator">|</span><span class="token function">grep</span> IPAddress</code></pre><img src="/2022/09/08/Docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/image-20220908163704528.png" class="">]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于我</title>
      <link href="/2022/07/08/%E5%85%B3%E4%BA%8E%E6%88%91/"/>
      <url>/2022/07/08/%E5%85%B3%E4%BA%8E%E6%88%91/</url>
      
        <content type="html"><![CDATA[<h3 id="记录学习"><a href="#记录学习" class="headerlink" title="记录学习"></a>记录学习</h3><p>关于我，怎么说呢？</p><p>首先搭建这个博客的缘由就是能记录一些学习的知识，每写一篇文章其实都可以加深自己对知识点的记忆。</p><p>在上学的时候其实本人是个不喜欢做笔记的，导致每次遇到问题都要百度、Google，这会大大影响我做事情的效率，在此之后我就决定把学习过的相关知识做一个记录，把每次记录当作一个成长。我比较喜欢一句话，每天进步一点点，那么日积月累就会进步很大，人都是慢慢拉开差距的。</p><h3 id="兴趣爱好"><a href="#兴趣爱好" class="headerlink" title="兴趣爱好"></a>兴趣爱好</h3><h4 id="游戏"><a href="#游戏" class="headerlink" title="游戏"></a>游戏</h4><p>本人可以说非常喜欢玩各种游戏，从小学三年级穿越火线到高中英雄联盟都很喜欢；手游也是玩了个遍，但是还是比较喜欢打王者，从一开始的为了娱乐打王者到最后为了拿各种标去打王者。</p><p>下面简单介绍一下游戏水平，仅仅是娱乐，勿喷！</p><p><strong>国四鲁班大师</strong></p><img src="/2022/07/08/%E5%85%B3%E4%BA%8E%E6%88%91/image-20220708125211394.png" class=""><img src="/2022/07/08/%E5%85%B3%E4%BA%8E%E6%88%91/image-20220708125227492.png" class=""><p><strong>巅峰赛全国400名</strong></p><img src="/2022/07/08/%E5%85%B3%E4%BA%8E%E6%88%91/image-20220708125239764.png" class=""><p><strong>一周三省一</strong></p><img src="/2022/07/08/%E5%85%B3%E4%BA%8E%E6%88%91/image-20220708125254795.png" class=""><p><strong>全能选手（每个位置都有万战）</strong></p><img src="/2022/07/08/%E5%85%B3%E4%BA%8E%E6%88%91/image-20220708125305476.png" class=""><h4 id="篮球"><a href="#篮球" class="headerlink" title="篮球"></a>篮球</h4><p>美国校队，唱跳rap……，多的就不介绍了，有喜欢打球的，可以现实battle一下</p><h4 id="音乐"><a href="#音乐" class="headerlink" title="音乐"></a>音乐</h4><p>网易云id：小明没有痛心</p><img src="/2022/07/08/%E5%85%B3%E4%BA%8E%E6%88%91/image-20220708125328081.png" class=""><h3 id="联系方式"><a href="#联系方式" class="headerlink" title="联系方式"></a>联系方式</h3><p>QQ：2218678594</p><p>Email：<a href="mailto:&#50;&#50;&#49;&#x38;&#54;&#55;&#x38;&#x35;&#57;&#x34;&#64;&#x71;&#113;&#x2e;&#x63;&#111;&#109;">&#50;&#50;&#49;&#x38;&#54;&#55;&#x38;&#x35;&#57;&#x34;&#64;&#x71;&#113;&#x2e;&#x63;&#111;&#109;</a></p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 游戏 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
